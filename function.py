import pandas as pd
import glob
import os
import re
import numpy as np
import datetime as dt

def parser(directory):
    """
    Функция - сборщик ГФХ в исходном виде в один файл

    :param directory: каталог с файлами ГФХ
    :return: df - датафрейм со всеми ГФХ в исходном виде
    """

    list_sheet_GPH = ["1", "Табл.1", "Т.1", "Т1", "Табл.1 "] # возможные названия страниц с ГФХ

    # Словарь для приведения всех заголовков в одному формату
    dict_columns = {'Параметры': ['Параметры', 'Показатели', 'Пар-ры'],
                    'Пласт': ['Пласт'],
                    'Район': ['Район'],
                    'Залежь': ['Залежь'],
                    'Средняя глубина залегания кровли': ['Средняя глубина залегания', 'Абсолютная отметка кровли'],
                    'Абсолютная отметка ВНК': ['ВНК'],
                    'Абсолютная отметка ГНК': ['ГНК'],
                    'Абсолютная отметка ГВК': ['ГВК'],
                    'Тип залежи': ['ип залежи'],
                    'Тип коллектора': ['Тип коллектора'],
                    'Площадь нефтегазоносности': ['Площадь нефте'],
                    'Средняя общая толщина': ['Средняя общая толщина'],
                    'Средняя эффективная нефтенасыщенная толщина': [r'нефтенасыщ.*толщина'],
                    'Средняя эффективная газонасыщенная толщина': [r'газонас.*толщина'],
                    'Средняя эффективная водонасыщенная толщина': [r'водонасыщ.*толщина'],
                    'Коэффициент пористости': ['пористости', 'ористост'],
                    'Коэффициент нефтенасыщенности ЧНЗ': ['ЧНЗ'],
                    'Коэффициент нефтенасыщенности ВНЗ': ['ВНЗ', 'ВИЗ'],
                    'Коэффициент нефтенасыщенности пласта': [r'нефтенасыщ.*пласта'],
                    'Коэффициент газонасыщенности пласта': [r'газонасыщ.*пласта'],
                    'Проницаемость': [r'Проницаемость$', 'по ГИС'],  # ?
                    'Коэффициент песчанистости': ['есчанистост'],
                    'Расчлененность': [r'асчлен.нност'],
                    'Начальная пластовая температура': ['температура'],
                    'Начальное пластовое давление': ['Начальное пластовое давление'],
                    'Вязкость нефти в пластовых условиях': ['Вязкость нефти в пл'],
                    'Плотность нефти в пластовых условиях': ['Плотность нефти в пл'],
                    'Плотность нефти в поверхностных условиях': ['Плотность нефти в пов'],
                    'Объемный коэффициент нефти': ['Объ.мный коэффициент нефти'],
                    'Содержание серы в нефти': ['Содержание серы'],
                    'Содержание парафина в нефти': ['Содержание парафина'],
                    'Давление насыщения нефти газом': ['Давление насыщения'],
                    'Газосодержание': ['Газосодержание', 'Газовый фактор'],
                    'Давление начала конденсации': ['Давление начала'],
                    'Плотность конденсата в стандартных условиях': ['Плотность конденсата'],
                    'Вязкость конденсата в стандартных условиях': ['Вязкость конденс'],
                    'Потенциальное содержание стабильного конденсата в газе (С5+)': ['Потенциальное'],
                    'Содержание сероводорода': ['ероводород'],
                    'Вязкость газа в пластовых условиях': ['Вязкость газа'],
                    'Плотность газа в пластовых условиях': ['Плотность газа'],
                    'Коэффициент сверхсжимаемости газа': ['сверхсжимаемости'],
                    'Вязкость воды в пластовых условиях': ['Вязкость воды'],
                    'Плотность воды в поверхностных условиях': ['Плотность воды'],  # ?
                    'Сжимаемость': [r'^Сжимаемост.*', 'Коэффициент сжимаемости'],  # ?
                    'нефти': [r'^нефт.', r'^Нефт.'],  # ?
                    'воды': [r'^вод.', r'^Вод.'],  # ?
                    'породы': ['пород', 'Пород'],
                    'Коэффициент вытеснения (водой)': ['Коэффициент вытеснения', 'водой',
                                                       'Коэффициент вытеснения, доли ед.', r'.+вытеснения\s*$'],  # ?
                    'Коэффициент вытеснения (газом)': [r'^Коэффициент вытес.*газом.*'],
                    'Коэффициент продуктивности': ['продуктивности'],
                    'Коэффициенты фильтрационных сопротивлений:': ['фильтрационных'],
                    'А': [r'^А$', r'^А$'],  # ?
                    'В': [r'^В$', r'^B$']}  # ?

    # считываем все файлы в папке
    files_xls = [item for item in
                 glob.glob(directory+r'\*{}'.format('.xls'))]
    files_xlsx = [item for item in
                  glob.glob(directory+r'\*{}'.format('.xlsx'))]
    files = files_xls + files_xlsx  # где-то xls, где-то xlsx

    os.chdir(directory)

    # пустой датафрейм для сбора всех ГФХ
    df = pd.DataFrame(
        columns=['Месторождение', 'Параметры', 'Пласт', 'Район', 'Залежь', 'Средняя глубина залегания кровли',
                 'Абсолютная отметка ВНК', 'Абсолютная отметка ГНК',
                 'Абсолютная отметка ГВК', 'Тип залежи', 'Тип коллектора', 'Площадь нефтегазоносности',
                 'Средняя общая толщина', 'Средняя эффективная нефтенасыщенная толщина',
                 'Средняя эффективная газонасыщенная толщина', 'Средняя эффективная водонасыщенная толщина',
                 'Коэффициент пористости', 'Коэффициент нефтенасыщенности ЧНЗ',
                 'Коэффициент нефтенасыщенности ВНЗ', 'Коэффициент нефтенасыщенности пласта',
                 'Коэффициент газонасыщенности пласта',
                 'Проницаемость', 'Коэффициент песчанистости', 'Расчлененность', 'Начальная пластовая температура',
                 'Начальное пластовое давление',
                 'Вязкость нефти в пластовых условиях', 'Плотность нефти в пластовых условиях',
                 'Плотность нефти в поверхностных условиях',
                 'Объемный коэффициент нефти', 'Содержание серы в нефти', 'Содержание парафина в нефти',
                 'Давление насыщения нефти газом',
                 'Газосодержание', 'Давление начала конденсации', 'Плотность конденсата в стандартных условиях',
                 'Вязкость конденсата в стандартных условиях',
                 'Потенциальное содержание стабильного конденсата в газе (С5+)', 'Содержание сероводорода',
                 'Вязкость газа в пластовых условиях',
                 'Плотность газа в пластовых условиях', 'Коэффициент сверхсжимаемости газа',
                 'Вязкость воды в пластовых условиях',
                 'Плотность воды в поверхностных условиях', 'Сжимаемость', 'нефти', 'воды', 'породы',
                 'Коэффициент вытеснения (водой)', 'Коэффициент вытеснения (газом)', 'Коэффициент продуктивности',
                 'Коэффициенты фильтрационных сопротивлений:', 'А', 'В'])

    # перебираем файлы в папке
    for file in files:
        name = os.path.basename(file)
        print(file)
        field = name.split('_')[0] # получение названия месторождения из заголовка

        xl_file = pd.ExcelFile(str(name))
        # sheet_names = xl_file.sheet_names  # список страниц в файле
        sheet_GFH = [sheet for sheet in list_sheet_GPH if sheet in xl_file.sheet_names][0] # поиск нужной страницы

        # считывание необходимой таблицы с необходимыми заголовками
        df_file = pd.read_excel(file, sheet_name=sheet_GFH, na_filter=False)
        row_param, col_param = np.where((df_file == 'Параметры') | (df_file == 'Показатели')) # строка-столбец начаоа таблицы с необходимымы данными
        dict_columns_copy = dict_columns.copy()

        df_file = df_file.iloc[row_param[0]:, col_param[0]:] # таблица без лишней шапки
        df_file.reset_index(drop=True, inplace=True)

        df_file = df_file.T # Транспонированная таблица
        df_file.reset_index(drop=True, inplace=True)
        df_file.iloc[0] = df_file.iloc[0].apply(lambda x: x.strip() if isinstance(x, str) else x)  # удаление пробелов в начале и в конце в предполагаемой строке заголовков

        if df_file.iloc[0][1] == "":
            df_file.iloc[0][1] = 'Пласт'
        if df_file.iloc[0][2] == "":
            df_file.iloc[0][2] = 'Район'
        if df_file.iloc[0][3] == "":
            df_file.iloc[0][3] = 'Залежь'

        df_file.columns = df_file.iloc[0]
        df_file = df_file.drop(0, axis=0)

        # Приведение заголовков к однотипным
        for col_name, value in df_file.items():
            Flag = 0
            if col_name:
                for k, v in dict_columns_copy.items():
                    for type_col in v:
                        if re.search(type_col, str(col_name)):
                            # if str(type_col) in str(col_name):
                            df_file.rename(columns={str(col_name): str(k)}, inplace=True)
                            Flag = 1
                            del dict_columns_copy[k]
                        if Flag == 1:
                            break
                    if Flag == 1:
                        break
            if Flag == 0:
                df_file.rename(columns={col_name: 'Удалить'}, inplace=True)

        if 'Удалить' in list(df_file):
            del df_file['Удалить']


        df_file.insert(0, 'Месторождение', field)

        # df = pd.concat([df, df_file]) # добавление страницы с таблицей в общую таблицу со всеми месторождениями из файла
        df = df._append(df_file, ignore_index=True)
    return df



# Для меня
# VNK = df_file.index[df_file.iloc[:, col_param[0]].str.contains('ВНК') == True].tolist()

# df_file = df_file.drop(np.where(df_file.iloc[:, col_param[0]].str.contains('воды в пласт') == True)[0])

# # a = df_file.iloc[0].values[col_param[0]]
# if len(VNK) > 0 and VNK[0] > 4:
#     VNK_value = df_file[VNK[0]]
#     df_file = df_file.drop(VNK[0], axis=1)
#     df_file.insert(4, 'ВНК', VNK_value)
#
# # if df_file.iloc[col_param[0]][3]  == "Тип залежи":
#     # df_file.insert(4, 'ВНК', np.nan)

# num_row = df_file.shape[1]
# df_file.columns = [col for col in range(0, num_row)]

# if df_file.shape[1] > 53:
#     df_file.drop(df_file.columns[53:], axis=1, inplace=True)